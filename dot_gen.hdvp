<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="13.0.1.1">
<procedure name="dot_gen">
<interface>
<oo>
<par name="ResultImages" base_type="iconic" dimension="0"/>
<par name="ImageResult2" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="Width_Ref_Image" base_type="ctrl" dimension="0"/>
<par name="Height_Ref_Image" base_type="ctrl" dimension="0"/>
<par name="back_brightness" base_type="ctrl" dimension="0"/>
<par name="spacing_x" base_type="ctrl" dimension="0"/>
<par name="spacing_y" base_type="ctrl" dimension="0"/>
<par name="dot_Radius" base_type="ctrl" dimension="0"/>
<par name="dot_brightness" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* MIT License</c>
<c></c>
<c>* Copyright (c) 2018 Tobias Nixdorf</c>
<c></c>
<c>* Permission is hereby granted, free of charge, to any person obtaining a copy</c>
<c>* of this software and associated documentation files (the "Software"), to deal</c>
<c>* in the Software without restriction, including without limitation the rights</c>
<c>* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</c>
<c>* copies of the Software, and to permit persons to whom the Software is</c>
<c>* furnished to do so, subject to the following conditions:</c>
<c></c>
<c>* The above copyright notice and this permission notice shall be included in all</c>
<c>* copies or substantial portions of the Software.</c>
<c></c>
<c>* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</c>
<c>* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</c>
<c>* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</c>
<c>* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</c>
<c>* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</c>
<c>* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</c>
<c>* SOFTWARE.</c>
<c></c>
<l>dev_update_off ()</l>
<c></c>
<c></c>
<l>gen_image_const (Image, 'byte', Width_Ref_Image, Height_Ref_Image)</l>
<l>paint_region (Image, Image, ImageResult, back_brightness, 'fill')</l>
<c></c>
<l>gen_empty_obj (ResultImages)</l>
<l>gen_empty_obj (ResultRegionsx)</l>
<l>gen_empty_obj (ResultRegions)</l>
<c></c>
<l>Tupxpos:=[spacing_x/2:spacing_x:Width_Ref_Image]</l>
<l>Tupypos:=[spacing_y/2:spacing_y:Height_Ref_Image]</l>
<l>dot_Radiusall:=gen_tuple_const(|Tupxpos|*|Tupypos|,dot_Radius)</l>
<c></c>
<c></c>
<l>tuplyposall:=[]</l>
<l>tuplxposall:=[]</l>
<c></c>
<l>for Index := 0 to |Tupypos|-1 by 1</l>
<l>tuple_insert (tuplyposall, Index*|Tupypos|, gen_tuple_const(|Tupxpos|,Tupypos[Index]), tuplyposall)</l>
<l>tuple_insert (tuplxposall, Index*|Tupxpos|, Tupxpos, tuplxposall)</l>
<l>endfor</l>
<c></c>
<l>gen_circle (Circle, tuplyposall, tuplxposall, dot_Radiusall)</l>
<c></c>
<l>paint_region (Circle, ImageResult, ImageResult2, dot_brightness, 'fill') </l>
<c></c>
<l>return ()</l>
</body>
<docu id="dot_gen">
<parameters>
<parameter id="Height_Ref_Image"/>
<parameter id="ImageResult2"/>
<parameter id="ResultImages"/>
<parameter id="Width_Ref_Image"/>
<parameter id="back_brightness"/>
<parameter id="dot_Radius"/>
<parameter id="dot_brightness"/>
<parameter id="spacing_x"/>
<parameter id="spacing_y"/>
</parameters>
</docu>
</procedure>
</hdevelop>
