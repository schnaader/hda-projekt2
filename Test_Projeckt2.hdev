<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="13.0.1.1">
<procedure name="main">
<interface/>
<body>
<c>* MIT License</c>
<c></c>
<c>* Copyright (c) 2018 Tobias Nixdorf</c>
<c></c>
<c>* Permission is hereby granted, free of charge, to any person obtaining a copy</c>
<c>* of this software and associated documentation files (the "Software"), to deal</c>
<c>* in the Software without restriction, including without limitation the rights</c>
<c>* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</c>
<c>* copies of the Software, and to permit persons to whom the Software is</c>
<c>* furnished to do so, subject to the following conditions:</c>
<c></c>
<c>* The above copyright notice and this permission notice shall be included in all</c>
<c>* copies or substantial portions of the Software.</c>
<c></c>
<c>* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</c>
<c>* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</c>
<c>* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</c>
<c>* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</c>
<c>* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</c>
<c>* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</c>
<c>* SOFTWARE.</c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>Height_Ref_Image:=1024</l>
<l>Width_Ref_Image:=1024</l>
<c></c>
<l>back_brightness:=255</l>
<l>dot_brightness:=0</l>
<c></c>
<l>dot_Radius:=10.5</l>
<l>spacing_x:=150</l>
<l>spacing_y:=150</l>
<c></c>
<c></c>
<c></c>
<l>dot_gen (ResultImages, ImageResult2, Width_Ref_Image, Height_Ref_Image, back_brightness, spacing_x, spacing_y, dot_Radius, dot_brightness)</l>
<c></c>
<l>dev_clear_window ()</l>
<l>dev_open_window_fit_size (0, 0, Width_Ref_Image, Height_Ref_Image, -1, -1, WindowHandle)</l>
<l>dev_open_window_fit_size (0, 1000, Width_Ref_Image, Height_Ref_Image, -1, -1, WindowHandle2)</l>
<l>dev_set_window (WindowHandle)</l>
<l>dev_display (ImageResult2)</l>
<c></c>
<l as_id="image_acquisition" as_name="Image Acquisition 02" as_grp="[1,2,1]" as_ord="1">open_framegrabber ('GigEVision2', 0, 0, 0, 0, 0, 0, 'progressive', -1, 'default', -1, 'false', 'default', 'USER_ID', 0, -1, AcqHandle)</l>
<c></c>
<l as_id="image_acquisition" as_name="Image Acquisition 02" as_grp="[1,2,2]" as_ord="1">set_framegrabber_param (AcqHandle, 'TriggerMode', 'Off')</l>
<l as_id="image_acquisition" as_name="Image Acquisition 02" as_grp="[1,2,2]" as_ord="3">set_framegrabber_param (AcqHandle, 'ExposureTimeAbs', 32000.5)</l>
<l as_id="image_acquisition" as_name="Image Acquisition 02" as_grp="[1,2,2]" as_ord="6">set_framegrabber_param (AcqHandle, 'LineInverter', 0)</l>
<c></c>
<c>    </c>
<l>dev_set_window (WindowHandle2)</l>
<l>    grab_image(ImageRef, AcqHandle)</l>
<l>    dev_display (ImageRef)</l>
<c></c>
<l>    wait_live:=1</l>
<l>    while (wait_live)</l>
<l>         grab_image(ImageTemp, AcqHandle) </l>
<l>         dev_display (ImageTemp)</l>
<l>         dev_disp_text ('Insert object n/ and click left mouse button', 'window', 'top', 'left', 'black', [], [])    </l>
<l>         get_mbutton (WindowHandle2, Row, Column, Button)</l>
<l>         if (Button=1)</l>
<l>            wait_live:=1 </l>
<l>             ImageChanged:=ImageTemp</l>
<l>         endif </l>
<l>    endwhile</l>
<c as_id="image_acquisition" as_name="Image Acquisition 02" as_grp="[2,4]" as_ord="1"></c>
<l as_id="image_acquisition" as_name="Image Acquisition 02" as_grp="[4,1]" as_ord="1">close_framegrabber (AcqHandle)</l>
<c></c>
<c></c>
<c></c>
<l>draw_region (Region, WindowHandle2)</l>
<c></c>
<l>segment_dots (ImageRef, Region, RegionIntersectionref, rowRef, columnRef)</l>
<l>segment_dots (ImageChanged, Region, RegionIntersectionChanged, rowChanged, columnChanged)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>distance_pp (rowRef, columnRef, rowChanged, columnChanged, Distance)</l>
<l>create_funct_1d_array (rowRef-rowChanged, FunctionRow)</l>
<l>create_funct_1d_array (columnRef-columnChanged, FunctionColumn)</l>
<c></c>
<l>smooth_funct_1d_gauss (FunctionRow, 2, SmoothedFunctionRef)</l>
<l>smooth_funct_1d_gauss (FunctionColumn, 2, SmoothedFunctionChanged)</l>
<c></c>
<l>GenParamNames := ['grid', 'grid_color','start_x','start_y','end_x','end_y']</l>
<l>GenParamValues := ['true','pink',0,0,200,200]</l>
<c></c>
<l>plot_funct_1d (WindowHandle2, SmoothedFunctionRef, [], [], 'red',GenParamNames, GenParamValues)</l>
<l>plot_funct_1d (WindowHandle2, SmoothedFunctionChanged, [], [], 'green',GenParamNames, GenParamValues)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>dev_display (ImageRef)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
