<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="17.12">
<procedure name="main">
<interface/>
<body>
<l>Height_Ref_Image:=1024</l>
<l>Width_Ref_Image:=1024</l>
<c></c>
<l>back_brightness:=255</l>
<l>dot_brightness:=0</l>
<c></c>
<l>dot_Radius:=10.5</l>
<l>spacing_x:=150</l>
<l>spacing_y:=150</l>
<c></c>
<c></c>
<c></c>
<l>dot_gen (ResultImages, ImageResult2, Width_Ref_Image, Height_Ref_Image, back_brightness, spacing_x, spacing_y, dot_Radius, dot_brightness)</l>
<c></c>
<l>dev_clear_window ()</l>
<l>dev_open_window_fit_size (0, 0, Width_Ref_Image, Height_Ref_Image, -1, -1, WindowHandle)</l>
<l>dev_open_window_fit_size (0, 1000, Width_Ref_Image, Height_Ref_Image, -1, -1, WindowHandle2)</l>
<l>dev_set_window (WindowHandle)</l>
<l>dev_display (ImageResult2)</l>
<c></c>
<l>* count_obj (ResultImages, Number)</l>
<l>* for Index2 := 1 to Number by 1</l>
<l>*     select_obj (ResultImages, ObjectSelected, Index2)</l>
<l>*     dev_display (ObjectSelected)</l>
<l>*     wait_seconds (0.1)</l>
<l>* endfor</l>
<c></c>
<c></c>
<l as_id="image_acquisition" as_name="Image Acquisition 02" as_grp="[1,2,1]" as_ord="1">open_framegrabber ('GigEVision2', 0, 0, 0, 0, 0, 0, 'progressive', -1, 'default', -1, 'false', 'default', 'USER_ID', 0, -1, AcqHandle)</l>
<c></c>
<l as_id="image_acquisition" as_name="Image Acquisition 02" as_grp="[1,2,2]" as_ord="1">set_framegrabber_param (AcqHandle, 'TriggerMode', 'Off')</l>
<l as_id="image_acquisition" as_name="Image Acquisition 02" as_grp="[1,2,2]" as_ord="3">set_framegrabber_param (AcqHandle, 'ExposureTimeAbs', 32000.5)</l>
<l as_id="image_acquisition" as_name="Image Acquisition 02" as_grp="[1,2,2]" as_ord="6">set_framegrabber_param (AcqHandle, 'LineInverter', 0)</l>
<l as_id="image_acquisition" as_name="Image Acquisition 02" as_grp="[2,1]" as_ord="1">grab_image_start (AcqHandle, -1)</l>
<l as_id="image_acquisition" as_name="Image Acquisition 02" as_grp="[2,2]" as_ord="1">while (true)</l>
<l as_id="image_acquisition" as_name="Image Acquisition 02" as_grp="[2,3]" as_ord="1">    grab_image_async (Image, AcqHandle, -1)</l>
<l>    dev_set_window (WindowHandle2)</l>
<l>    dev_display (Image)</l>
<l>endwhile</l>
<l>    stop()</l>
<l>    while (true)</l>
<l>     grab_image_async (Image2, AcqHandle, -1)</l>
<l>     dev_display (Image2)</l>
<l>    endwhile</l>
<c as_id="image_acquisition" as_name="Image Acquisition 02" as_grp="[2,4]" as_ord="1">    * Image Acquisition 02: Do something</c>
<c></c>
<c></c>
<l as_id="image_acquisition" as_name="Image Acquisition 02" as_grp="[4,1]" as_ord="1">close_framegrabber (AcqHandle)</l>
<c></c>
<l>median_image (Image2, ImageMedian2, 'circle', 10, 'mirrored')</l>
<l>median_image (Image, ImageMedian, 'circle', 10, 'mirrored')</l>
<l>dyn_threshold (Image2, ImageMedian2, RegionDynThresh2, 5, 'dark')</l>
<l>dyn_threshold (Image, ImageMedian, RegionDynThresh, 5, 'dark')</l>
<c></c>
<c></c>
<l>opening_circle (RegionDynThresh, RegionOpening, 3.5)</l>
<l>opening_circle (RegionDynThresh2, RegionOpening2, 3.5)</l>
<c></c>
<l>closing_circle (RegionOpening2, RegionClosing2, 15.5)</l>
<l>closing_circle (RegionOpening, RegionClosing, 15.5)</l>
<c></c>
<l>connection (RegionClosing, ConnectedRegions0)</l>
<l>connection (RegionClosing2, ConnectedRegions2)</l>
<c></c>
<c></c>
<l>draw_region (Region, WindowHandle2)</l>
<c></c>
<l>intersection (Region, ConnectedRegions2, RegionIntersection2)</l>
<l>intersection (Region, ConnectedRegions0, RegionIntersection)</l>
<c></c>
<l>connection (RegionIntersection, ConnectedRegions00)</l>
<l>connection (RegionIntersection2, ConnectedRegions02)</l>
<c></c>
<l>region_features (ConnectedRegions02, 'row', row1)</l>
<l>region_features (ConnectedRegions02, 'column', column1)</l>
<c></c>
<l>region_features (ConnectedRegions00, 'row', row2)</l>
<l>region_features (ConnectedRegions00, 'column', column2)</l>
<c></c>
<l>distance_pp (row1, column1, row2, column2, Distance)</l>
<l>create_funct_1d_array (row1-row2, Function)</l>
<l>create_funct_1d_array (column1-column2, Function2)</l>
<c></c>
<l>smooth_funct_1d_gauss (Function2, 2, SmoothedFunction2)</l>
<l>smooth_funct_1d_gauss (Function, 2, SmoothedFunction)</l>
<l>plot_funct_1d (WindowHandle2, SmoothedFunction, [], [], [], [], [])</l>
<l>plot_funct_1d (WindowHandle2, SmoothedFunction2, [], [], [], [], [])</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="dot_gen">
<interface>
<oo>
<par name="ResultImages" base_type="iconic" dimension="0"/>
<par name="ImageResult2" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="Width_Ref_Image" base_type="ctrl" dimension="0"/>
<par name="Height_Ref_Image" base_type="ctrl" dimension="0"/>
<par name="back_brightness" base_type="ctrl" dimension="0"/>
<par name="spacing_x" base_type="ctrl" dimension="0"/>
<par name="spacing_y" base_type="ctrl" dimension="0"/>
<par name="dot_Radius" base_type="ctrl" dimension="0"/>
<par name="dot_brightness" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>dev_close_window ()</l>
<l>dev_open_window_fit_size (0, 0, Width_Ref_Image, Width_Ref_Image, -1, -1, WindowHandle)</l>
<l>dev_update_off ()</l>
<l>gen_image_const (Image, 'byte', Width_Ref_Image, Height_Ref_Image)</l>
<l>paint_region (Image, Image, ImageResult, back_brightness, 'fill')</l>
<c></c>
<l>gen_empty_obj (ResultImages)</l>
<l>gen_empty_obj (ResultRegions)</l>
<l>for Index := spacing_x to Width_Ref_Image by spacing_x</l>
<l>    for Index1 := spacing_y to Height_Ref_Image by spacing_y   </l>
<l>        gen_circle (Circle, Index, Index1, dot_Radius)</l>
<l>        paint_region (Circle, ImageResult, ImageResult1, dot_brightness, 'fill') </l>
<l>        concat_obj (ResultImages, ImageResult1, ResultImages)</l>
<l>        concat_obj (ResultRegions, Circle, ResultRegions)</l>
<c>        </c>
<l>    endfor</l>
<l>endfor</l>
<c></c>
<l>paint_region (ResultRegions, ImageResult, ImageResult2, dot_brightness, 'fill') </l>
<c></c>
<l>return ()</l>
</body>
<docu id="dot_gen">
<parameters>
<parameter id="Height_Ref_Image"/>
<parameter id="ImageResult2"/>
<parameter id="ResultImages"/>
<parameter id="Width_Ref_Image"/>
<parameter id="back_brightness"/>
<parameter id="dot_Radius"/>
<parameter id="dot_brightness"/>
<parameter id="spacing_x"/>
<parameter id="spacing_y"/>
</parameters>
</docu>
</procedure>
</hdevelop>
