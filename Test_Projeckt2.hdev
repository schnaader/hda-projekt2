<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="13.0.1.1">
<procedure name="main">
<interface/>
<body>
<l>* MIT License</l>
<c></c>
<c>* Copyright (c) 2018 Tobias Nixdorf</c>
<c></c>
<l>* Permission is hereby granted, free of charge, to any person obtaining a copy</l>
<l>* of this software and associated documentation files (the "Software"), to deal</l>
<l>* in the Software without restriction, including without limitation the rights</l>
<l>* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</l>
<l>* copies of the Software, and to permit persons to whom the Software is</l>
<l>* furnished to do so, subject to the following conditions:</l>
<c></c>
<l>* The above copyright notice and this permission notice shall be included in all</l>
<l>* copies or substantial portions of the Software.</l>
<c></c>
<l>* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</l>
<l>* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</l>
<l>* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</l>
<l>* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</l>
<l>* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</l>
<l>* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</l>
<l>* SOFTWARE.</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>Height_Ref_Image:=1024</l>
<l>Width_Ref_Image:=1024</l>
<c></c>
<l>back_brightness:=255</l>
<l>dot_brightness:=0</l>
<c></c>
<l>dot_Radius:=10.5</l>
<l>spacing_x:=150</l>
<l>spacing_y:=150</l>
<c></c>
<c></c>
<c></c>
<l>dot_gen (ResultImages, ImageResult2, Width_Ref_Image, Height_Ref_Image, back_brightness, spacing_x, spacing_y, dot_Radius, dot_brightness)</l>
<c></c>
<l>dev_clear_window ()</l>
<l>dev_open_window_fit_size (0, 0, Width_Ref_Image, Height_Ref_Image, -1, -1, WindowHandle)</l>
<l>dev_open_window_fit_size (0, 1000, Width_Ref_Image, Height_Ref_Image, -1, -1, WindowHandle2)</l>
<l>dev_set_window (WindowHandle)</l>
<l>dev_display (ImageResult2)</l>
<c></c>
<l>* count_obj (ResultImages, Number)</l>
<l>* for Index2 := 1 to Number by 1</l>
<l>*     select_obj (ResultImages, ObjectSelected, Index2)</l>
<l>*     dev_display (ObjectSelected)</l>
<l>*     wait_seconds (0.1)</l>
<l>* endfor</l>
<c></c>
<c></c>
<l as_id="image_acquisition" as_name="Image Acquisition 02" as_grp="[1,2,1]" as_ord="1">open_framegrabber ('GigEVision2', 0, 0, 0, 0, 0, 0, 'progressive', -1, 'default', -1, 'false', 'default', 'USER_ID', 0, -1, AcqHandle)</l>
<c></c>
<l as_id="image_acquisition" as_name="Image Acquisition 02" as_grp="[1,2,2]" as_ord="1">set_framegrabber_param (AcqHandle, 'TriggerMode', 'Off')</l>
<l as_id="image_acquisition" as_name="Image Acquisition 02" as_grp="[1,2,2]" as_ord="3">set_framegrabber_param (AcqHandle, 'ExposureTimeAbs', 32000.5)</l>
<l as_id="image_acquisition" as_name="Image Acquisition 02" as_grp="[1,2,2]" as_ord="6">set_framegrabber_param (AcqHandle, 'LineInverter', 0)</l>
<l as_id="image_acquisition" as_name="Image Acquisition 02" as_grp="[2,1]" as_ord="1">grab_image_start (AcqHandle, -1)</l>
<c>    </c>
<l>dev_set_window (WindowHandle2)</l>
<l as_id="image_acquisition" as_name="Image Acquisition 02" as_grp="[2,2]" as_ord="1">while (true)</l>
<l as_id="image_acquisition" as_name="Image Acquisition 02" as_grp="[2,3]" as_ord="1">    grab_image_async (Imageref, AcqHandle, -1)</l>
<c></c>
<l>    dev_display (Imageref)</l>
<l>endwhile</l>
<c></c>
<c></c>
<l>while (true)</l>
<l>     grab_image_async (Imagedis, AcqHandle, -1)</l>
<l>     dev_display (Imagedis)</l>
<l>endwhile</l>
<c as_id="image_acquisition" as_name="Image Acquisition 02" as_grp="[2,4]" as_ord="1"></c>
<l as_id="image_acquisition" as_name="Image Acquisition 02" as_grp="[4,1]" as_ord="1">close_framegrabber (AcqHandle)</l>
<c></c>
<l>median_image (Imageref, ImageMedianref, 'circle', 10, 'mirrored')</l>
<l>median_image (Imagedis, ImageMediandis, 'circle', 10, 'mirrored')</l>
<l>dyn_threshold (Imageref, ImageMedianref, RegionDynThreshref, 5, 'dark')</l>
<l>dyn_threshold (Imagedis, ImageMediandis, RegionDynThreshdis, 5, 'dark')</l>
<c></c>
<c></c>
<l>opening_circle (RegionDynThreshref, RegionOpeningref, 3.5)</l>
<l>opening_circle (RegionDynThreshdis, RegionOpeningdis, 3.5)</l>
<c></c>
<l>closing_circle (RegionOpeningref, RegionClosingref, 15.5)</l>
<l>closing_circle (RegionOpeningdis, RegionClosingdis, 15.5)</l>
<c></c>
<l>connection (RegionClosingref, ConnectedRegionsref)</l>
<l>connection (RegionClosingdis, ConnectedRegionsdis)</l>
<c></c>
<c></c>
<l>draw_region (Region, WindowHandle2)</l>
<c></c>
<l>intersection (Region, ConnectedRegionsref, RegionIntersectionref)</l>
<l>intersection (Region, ConnectedRegionsdis, RegionIntersectiondis)</l>
<c></c>
<l>connection (RegionIntersectionref, ConnectedRegionsref)</l>
<l>connection (RegionIntersectiondis, ConnectedRegionsdis)</l>
<c></c>
<l>region_features (ConnectedRegionsref, 'row', rowref)</l>
<l>region_features (ConnectedRegionsref, 'column', columnref)</l>
<c></c>
<l>region_features (ConnectedRegionsdis, 'row', rowdis)</l>
<l>region_features (ConnectedRegionsdis, 'column', columndis)</l>
<c></c>
<l>distance_pp (rowref, columnref, rowdis, columndis, Distance)</l>
<l>create_funct_1d_array (rowref-rowdis, Functionref)</l>
<l>create_funct_1d_array (columnref-columndis, Functiondis)</l>
<c></c>
<l>smooth_funct_1d_gauss (Functionref, 2, SmoothedFunctionref)</l>
<l>smooth_funct_1d_gauss (Functiondis, 2, SmoothedFunctiondis)</l>
<c></c>
<l>GenParamNames := ['grid']</l>
<l>GenParamValues := ['true']</l>
<c></c>
<l>plot_funct_1d (WindowHandle2, SmoothedFunctionref, [], [], 'red', [], [])</l>
<l>plot_funct_1d (WindowHandle2, SmoothedFunctiondis, [], [], 'green',GenParamNames, GenParamValues)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="dot_gen">
<interface>
<oo>
<par name="ResultImages" base_type="iconic" dimension="0"/>
<par name="ImageResult2" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="Width_Ref_Image" base_type="ctrl" dimension="0"/>
<par name="Height_Ref_Image" base_type="ctrl" dimension="0"/>
<par name="back_brightness" base_type="ctrl" dimension="0"/>
<par name="spacing_x" base_type="ctrl" dimension="0"/>
<par name="spacing_y" base_type="ctrl" dimension="0"/>
<par name="dot_Radius" base_type="ctrl" dimension="0"/>
<par name="dot_brightness" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>dev_close_window ()</l>
<l>dev_open_window_fit_size (0, 0, Width_Ref_Image, Width_Ref_Image, -1, -1, WindowHandle)</l>
<l>dev_update_off ()</l>
<l>gen_image_const (Image, 'byte', Width_Ref_Image, Height_Ref_Image)</l>
<l>paint_region (Image, Image, ImageResult, back_brightness, 'fill')</l>
<c></c>
<l>gen_empty_obj (ResultImages)</l>
<l>gen_empty_obj (ResultRegions)</l>
<l>for Index := spacing_x to Width_Ref_Image by spacing_x</l>
<l>    for Index1 := spacing_y to Height_Ref_Image by spacing_y   </l>
<l>        gen_circle (Circle, Index, Index1, dot_Radius)</l>
<l>        paint_region (Circle, ImageResult, ImageResult1, dot_brightness, 'fill') </l>
<l>        concat_obj (ResultImages, ImageResult1, ResultImages)</l>
<l>        concat_obj (ResultRegions, Circle, ResultRegions)</l>
<c>        </c>
<l>    endfor</l>
<l>endfor</l>
<c></c>
<l>paint_region (ResultRegions, ImageResult, ImageResult2, dot_brightness, 'fill') </l>
<c></c>
<l>return ()</l>
</body>
<docu id="dot_gen">
<parameters>
<parameter id="Height_Ref_Image"/>
<parameter id="ImageResult2"/>
<parameter id="ResultImages"/>
<parameter id="Width_Ref_Image"/>
<parameter id="back_brightness"/>
<parameter id="dot_Radius"/>
<parameter id="dot_brightness"/>
<parameter id="spacing_x"/>
<parameter id="spacing_y"/>
</parameters>
</docu>
</procedure>
</hdevelop>
