<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="13.0.1.1">
<procedure name="main">
<interface/>
<body>
<c>* MIT License</c>
<c></c>
<c>* Copyright (c) 2018 Tobias Nixdorf</c>
<c></c>
<c>* Permission is hereby granted, free of charge, to any person obtaining a copy</c>
<c>* of this software and associated documentation files (the "Software"), to deal</c>
<c>* in the Software without restriction, including without limitation the rights</c>
<c>* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</c>
<c>* copies of the Software, and to permit persons to whom the Software is</c>
<c>* furnished to do so, subject to the following conditions:</c>
<c></c>
<c>* The above copyright notice and this permission notice shall be included in all</c>
<c>* copies or substantial portions of the Software.</c>
<c></c>
<c>* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</c>
<c>* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</c>
<c>* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</c>
<c>* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</c>
<c>* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</c>
<c>* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</c>
<c>* SOFTWARE.</c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>Height_Ref_Image:=1024</l>
<l>Width_Ref_Image:=1024</l>
<c></c>
<l>back_brightness:=255</l>
<l>dot_brightness:=0</l>
<c></c>
<l>dot_Radius:=10.5</l>
<l>spacing_x:=150</l>
<l>spacing_y:=150</l>
<c></c>
<c></c>
<c></c>
<l>dot_gen (ResultImages, ImageResult2, Width_Ref_Image, Height_Ref_Image, back_brightness, spacing_x, spacing_y, dot_Radius, dot_brightness)</l>
<c></c>
<l>dev_clear_window ()</l>
<l>dev_open_window_fit_size (0, 0, Width_Ref_Image, Height_Ref_Image, -1, -1, WindowHandle)</l>
<l>dev_open_window_fit_size (0, 1000, Width_Ref_Image, Height_Ref_Image, -1, -1, WindowHandle2)</l>
<l>dev_set_window (WindowHandle)</l>
<l>dev_display (ImageResult2)</l>
<c></c>
<c></c>
<l>Live:=0</l>
<l>if(Live)</l>
<l>    init_Camera (AcqHandle, Exception)</l>
<l>endif</l>
<c></c>
<c></c>
<l>dev_set_window (WindowHandle2)</l>
<c></c>
<l>if(Live)</l>
<l>    grab_image(ImageRef, AcqHandle) </l>
<l>else</l>
<l>    read_image (ImageRef, '/Users/tobiasnixdorf/Documents/h-da/6 Semester/Project2/hda-projekt2/Brojekt 2/Ref/test.tiff')</l>
<l>endif</l>
<l>dev_display (ImageRef)</l>
<c></c>
<c></c>
<l>live_view:=1</l>
<l>while (live_view)</l>
<l>    if(Live)</l>
<l>        grab_image(ImageTemp, AcqHandle) </l>
<l>    else</l>
<l>        read_image (ImageTemp, '/Users/tobiasnixdorf/Documents/h-da/6 Semester/Project2/hda-projekt2/Brojekt 2/ID003/test37.tiff')</l>
<l>    endif</l>
<l>    dev_display (ImageTemp)</l>
<l>    dev_disp_text ('Insert object and click left mouse button', 'window', 'top', 'left', 'black', [], [])    </l>
<l>    get_mbutton (WindowHandle2, Row, Column, Button)</l>
<l>    if (Button=1)</l>
<l>        live_view:=0</l>
<l>        ImageChanged:=ImageTemp</l>
<l>    endif </l>
<l>endwhile</l>
<l>dev_display (ImageRef)</l>
<c></c>
<l>rotate_image (ImageRef, ImageRef, 10, 'constant')</l>
<c></c>
<l>median_image (ImageRef, ImageMedian, 'circle', 10, 'mirrored')</l>
<l>dyn_threshold (ImageRef, ImageMedian, RegionDynThresh, 40, 'dark')</l>
<l>opening_circle (RegionDynThresh, RegionOpening, 3.5)</l>
<l>closing_circle (RegionOpening, RegionClosing, 15.5)</l>
<l>connection (RegionClosing, ConnectedRegions1)</l>
<l>select_shape (ConnectedRegions1, SelectedRegions, 'area', 'and', 42.585, 100)</l>
<l>union1 (SelectedRegions, RegionUnion)</l>
<l>smallest_rectangle2 (RegionUnion, Row, Column, Phi, Length1, Length2)</l>
<l>gen_rectangle2 (Rectangle2, Row, Column, Phi, Length1, Length2)</l>
<l>rotate_image (ImageRef, ImageRotate,270-(Phi/3.1415)*180, 'constant')</l>
<c></c>
<l>median_image (ImageRotate, ImageMedian, 'circle', 10, 'mirrored')</l>
<l>dyn_threshold (ImageRotate, ImageMedian, RegionDynThresh, 35, 'dark')</l>
<l>opening_circle (RegionDynThresh, RegionOpening, 3.5)</l>
<l>closing_circle (RegionOpening, RegionClosing, 15.5)</l>
<l>connection (RegionClosing, ConnectedRegions1)</l>
<l>select_shape (ConnectedRegions1, SelectedRegions, 'area', 'and', 42.585, 100)</l>
<l>count_obj (SelectedRegions, Number)</l>
<l>Side_number:=int(sqrt(Number))</l>
<l>union1 (SelectedRegions, RegionUnion)</l>
<l>smallest_rectangle2 (RegionUnion, Row, Column, Phi, Length1, Length2)</l>
<c></c>
<l>gen_rectangle2 (Rectangle1, Row, Column, Phi, Length1+Length1/(Side_number-1), Length2+Length2/(Side_number-1))</l>
<c></c>
<l>gen_empty_obj (Regions)</l>
<l>rowsref:=[]</l>
<l>columsref:=[]</l>
<l>for j := 0 to Side_number-1 by 1</l>
<l>    for i := 0 to Side_number-1 by 1</l>
<l>  clip_region (Rectangle1, RegionClipped, (Row-(Length1+Length1/(Side_number-1))+ (Length1*2/(Side_number-1))*(j)), Column-(Length2+Length2/(Side_number-1))+ ((Length2*2)/(Side_number-1))*(i), Row-(Length1+Length1/(Side_number-1)) + (Length1*2/(Side_number-1))*(j+1), Column-(Length2+Length2/(Side_number-1)) + ((Length2*2)/(Side_number-1))*(i+1))</l>
<l>  intersection (RegionDynThresh, RegionClipped, RegionIntersection)</l>
<l>  region_features (RegionIntersection, 'row', row_out)</l>
<l>  region_features (RegionIntersection, 'column', column_out)</l>
<l>rowsref:=[rowsref,row_out]</l>
<l>columsref:=[columsref,column_out]</l>
<c></c>
<c></c>
<c></c>
<l>  concat_obj (Regions, Rectangle1, Regions)</l>
<l>    endfor</l>
<l>endfor</l>
<c></c>
<l>complement (Regions, RegionsComplement)</l>
<c></c>
<l>distance_pp (rowRef, columnRef, rowChanged, columnChanged, Distance)</l>
<c></c>
<l>disp_arrow (WindowHandle2, 0, 0, 0, 0,0.5)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
