<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="13.0.1.1">
<procedure name="main">
<interface/>
<body>
<c>* MIT License</c>
<c></c>
<c>* Copyright (c) 2018 Tobias Nixdorf</c>
<c></c>
<c>* Permission is hereby granted, free of charge, to any person obtaining a copy</c>
<c>* of this software and associated documentation files (the "Software"), to deal</c>
<c>* in the Software without restriction, including without limitation the rights</c>
<c>* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</c>
<c>* copies of the Software, and to permit persons to whom the Software is</c>
<c>* furnished to do so, subject to the following conditions:</c>
<c></c>
<c>* The above copyright notice and this permission notice shall be included in all</c>
<c>* copies or substantial portions of the Software.</c>
<c></c>
<c>* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</c>
<c>* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</c>
<c>* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</c>
<c>* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</c>
<c>* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</c>
<c>* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</c>
<c>* SOFTWARE.</c>
<c></c>
<c></c>
<c></c>
<l>Height_Ref_Image:=1800</l>
<l>Width_Ref_Image:=2880</l>
<c></c>
<l>back_brightness:=255</l>
<l>dot_brightness:=0</l>
<c></c>
<l>dot_Radius:=2.5</l>
<l>spacing_x:=10</l>
<l>spacing_y:=10</l>
<c></c>
<l>Live:=0</l>
<c></c>
<c>*get Timestamp</c>
<l>get_system_time (MSecond, Second, Minute, Hour, Day, YDay, Month, Year)</l>
<l>Timestamp:=Year*10000000000000+Month*100000000000+Day*1000000000+Hour*10000000+Minute*100000+Second*1000+MSecond</l>
<c></c>
<c></c>
<c>*generating a dot matrix</c>
<l>dot_gen (ResultImages, ImageResult2, Width_Ref_Image, Height_Ref_Image, back_brightness, spacing_x, spacing_y, dot_Radius, dot_brightness)</l>
<l>for Index := 1 to 5 by 1</l>
<l>    dev_close_window ()   </l>
<l>endfor</l>
<l>write_image (ImageResult2, 'png', 0, '../hda-projekt2/Projekt 2/Dot_Image.png')</l>
<c></c>
<c></c>
<l>dev_open_window_fit_size (0, 0, Width_Ref_Image, Height_Ref_Image, Width_Ref_Image, Height_Ref_Image, WindowHandle)</l>
<l>dev_open_window_fit_size (0, 600, Width_Ref_Image, Height_Ref_Image, -1, -1, WindowHandle2)</l>
<l>dev_set_window (WindowHandle)</l>
<l>dev_display (ImageResult2)</l>
<c></c>
<c></c>
<l>if(Live)</l>
<l>    init_Camera (AcqHandle, Exception)</l>
<l>endif</l>
<c></c>
<l>dev_set_window (WindowHandle2)</l>
<c></c>
<l>if(Live)</l>
<l>    grab_image(ImageRef, AcqHandle) </l>
<l>else</l>
<l>    read_image (ImageRef, '../hda-projekt2/Projekt 2/Ref/test.tiff')</l>
<l>endif</l>
<l>dev_display (ImageRef)</l>
<c></c>
<c></c>
<c></c>
<l>dev_display (ImageRef)</l>
<c></c>
<c></c>
<l>median_image (ImageRef, ImageMedian, 'circle', 10, 'mirrored')</l>
<l>dyn_threshold (ImageRef, ImageMedian, RegionDynThresh, 40, 'dark')</l>
<l>opening_circle (RegionDynThresh, RegionOpening, 3.5)</l>
<l>closing_circle (RegionOpening, RegionClosing, 15.5)</l>
<l>connection (RegionClosing, ConnectedRegions1)</l>
<l>select_shape (ConnectedRegions1, SelectedRegions, 'area', 'and', 42.585, 100)</l>
<l>union1 (SelectedRegions, RegionUnion)</l>
<l>smallest_rectangle2 (RegionUnion, Row, Column, Phi, Length1, Length2)</l>
<l>gen_rectangle2 (Rectangle2, Row, Column, Phi, Length1, Length2)</l>
<c></c>
<l>hom_mat2d_identity (HomMat2DIdentity)</l>
<l>hom_mat2d_rotate (HomMat2DIdentity, 3.1415*1/2-Phi,  Row,Column, HomMat2DRotate)</l>
<l>affine_trans_image (ImageRef, ImageRotate, HomMat2DRotate, 'nearest_neighbor', 'false')</l>
<c></c>
<c></c>
<l>median_image (ImageRotate, ImageMedian, 'circle', 10, 'mirrored')</l>
<l>dyn_threshold (ImageRotate, ImageMedian, RegionDynThresh, 35, 'dark')</l>
<l>opening_circle (RegionDynThresh, RegionOpening, 3.5)</l>
<l>closing_circle (RegionOpening, RegionClosing, 15.5)</l>
<l>connection (RegionClosing, ConnectedRegions1)</l>
<l>select_shape (ConnectedRegions1, SelectedRegions, 'area', 'and', 42.585, 100)</l>
<l>count_obj (SelectedRegions, Number)</l>
<l>Side_number:=int(sqrt(Number))</l>
<l>union1 (SelectedRegions, RegionUnion)</l>
<l>smallest_rectangle2 (RegionUnion, Row, Column, Phi, Length1, Length2)</l>
<c></c>
<l>gen_rectangle2 (Rectangle1, Row, Column, Phi, Length1+Length1/(Side_number-1), Length2+Length2/(Side_number-1))</l>
<c></c>
<l>gen_empty_obj (Regions)</l>
<l>rowsref:=[]</l>
<l>columsref:=[]</l>
<l>rowschanged:=[]</l>
<l>columchanged:=[]</l>
<c></c>
<l>for j := 0 to Side_number-1 by 1</l>
<l>    for i := 0 to Side_number-1 by 1</l>
<l>        clip_region (Rectangle1, RegionClipped, (Row-(Length1+Length1/(Side_number))+ (Length1*2/(Side_number-1))*(j)), Column-(Length2+Length2/(Side_number))+ ((Length2*2)/(Side_number-1))*(i), Row-(Length1+Length1/(Side_number)) + (Length1*2/(Side_number-1))*(j+1), Column-(Length2+Length2/(Side_number)) + ((Length2*2)/(Side_number-1))*(i+1))</l>
<l>        intersection (RegionDynThresh, RegionClipped, RegionIntersection)</l>
<l>        region_features (RegionIntersection, 'row', row_out)</l>
<l>        region_features (RegionIntersection, 'column', column_out)</l>
<l>        rowsref:=[rowsref,row_out]</l>
<l>        columsref:=[columsref,column_out]</l>
<l>        concat_obj (Regions, RegionClipped, Regions)</l>
<l>    endfor</l>
<l>endfor</l>
<c></c>
<l>hom_mat2d_rotate (HomMat2DRotate, -(3.1415*1/2-Phi), Column, Row, HomMat2DRotate1)</l>
<l>affine_trans_region (Regions, RegionAffineTrans, HomMat2DRotate1, 'nearest_neighbor')</l>
<l>count_obj (RegionAffineTrans, Number1)</l>
<c></c>
<l>segment_dots (ImageRef, RegionAffineTrans, rowref, columnref)</l>
<c></c>
<l>while(1)</l>
<l>    if(Live)</l>
<l>        grab_image(ImageChanged, AcqHandle)        </l>
<l>    else</l>
<l>        read_image (ImageChanged, '../hda-projekt2/Projekt 2/Test2 ID002/test32.tiff')</l>
<l>    endif</l>
<c>    </c>
<c>    </c>
<l>    segment_dots (ImageChanged, RegionAffineTrans, rowschanged, columchanged)</l>
<l>    distance_pp (rowref, columnref, rowschanged, columchanged, Distance)</l>
<c>    </c>
<c>    </c>
<l>    tuple_find (rowsref, 0.0, Indices1)</l>
<l>    tuple_find (columnref, 0.0, Indices2)</l>
<l>    tuple_find (rowschanged, 0.0, Indices3)</l>
<l>    tuple_find (columchanged, 0.0, Indices4)</l>
<l>    Indicesremove:=[Indices1,Indices2,Indices3,Indices4]</l>
<l>    tuple_find (Indicesremove, -1, Indices5)</l>
<l>    tuple_remove (Indicesremove, Indices5, Indicesremove)</l>
<c>    </c>
<l>    tuple_remove (Distance, Indicesremove, Distance) </l>
<c>    </c>
<l>    tuple_remove (rowsref, Indicesremove, rowsrefreduced) </l>
<l>    tuple_remove (columnref, Indicesremove, columnrefreduced) </l>
<c>    </c>
<l>    tuple_remove (columchanged, Indicesremove, columchangedreduced) </l>
<l>    tuple_remove (rowschanged, Indicesremove, rowschangedreduced) </l>
<l>    dev_display (ImageChanged)</l>
<l>    disp_arrow (WindowHandle2, rowsrefreduced, columnrefreduced, rowschangedreduced, columchangedreduced,3)</l>
<c>    </c>
<l>    if(Live)</l>
<l>    else</l>
<l>    break    </l>
<l>    endif</l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>endwhile</l>
<c>    </c>
<l>if(Live)</l>
<l>    close_framegrabber (AcqHandle) </l>
<c>  </c>
<l>endif</l>
<c></c>
<c></c>
<c>*CSV Data Output</c>
<l>open_file ('/Users/tobiasnixdorf/Documents/h-da/6 Semester/Project2/hda-projekt2/Out_Data/'+Timestamp+'_Data.csv', 'output', FileHandle)</l>
<l>FirstLine:=['Number',';','Row_Reference',';','Column_Reference',';','Row_Changed',';','Column_Changed']</l>
<l>fwrite_string (FileHandle, FirstLine)</l>
<c></c>
<l>for Index1 := 0 to |rowsref|-1 by 1</l>
<l>    TempString:=[Index1,';',rowsref[Index1],';',columsref[Index1],';',rowschanged[Index1],';',columchanged[Index1]]</l>
<l>    fnew_line (FileHandle)</l>
<l>    fwrite_string (FileHandle, TempString)  </l>
<l>endfor</l>
<c></c>
<l>close_file (FileHandle)</l>
<c></c>
<c></c>
<c></c>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
